; https://bike8615.blogspot.com/2017/09/asterisk.html
; 記述の仕方は、sip.conf と類似 (各行ごとに記述、コメントの扱いは同じ)
; [general] で全般的なことを定義
; [コンテキスト名] でそのコンテキスト内の記述をする
;
[general]
;
writeprotect=no     ; CLI (Asteriskのコマンドライン・インタフェース) での変更を不許可
priorityjumping=no  ; n+101 ジャンプ機能は無効 (n+101 ジャンプはAsteriskの古いバージョンの名残り)
;
;【ダイヤルプラン】
;
;    1. ひかり電話の外線着信
;
;       事前に着信時の振る舞いを設定しておく。着信は設定に従う。
;
;       この設定に従って、ブラステル1 への転送か、または留守録にする。
;       設定は内線 400 で、次のように設定する
;            "1" 応答          : 転送電話設定 (ブラステル1 への転送)
;            "7" 応答          : 留守録音設定
;
;    2. 内線 99 呼び出しは全員の内線呼び出し
;
;    3. 内線から内線への相互呼び出しができる
;
;    4. 内線から外線発信はできない (外線発信は家電話で行う。Asteriskサーバーのセキュリティ対策の一つ)
;      (国内固定、国内携帯、フリーダイヤル、サービス番号(110, 119, 117, 104 など)、海外発信はできない)
;
;    5. 内線から 100 を呼び出すと、音声追っかけ再生テストができる
;      (話した内容をオウム返しに返してくれるので、音声品質や遅延を聞きながら確認できる)
;
;    6. ＦＡＸ送受信は Fusion で行う
;
;
; エクステンションの記述は "exten => エクステンション番号,順序番号,アプリケーション" のように記述する
; 例: exten => 1111,1,Dial(SIP/1234,20) ; 順序番号は 1,2,3... と記述するか、"n" で 2以降を表すことができる
;      この例では、1111がダイヤルされると、Dialアプリケーションは1234を20秒間呼出すことを意味している
;     exten => 1234,1,Dial(SIP/${EXTEN},25) ; ${EXTEN} はエクステンション番号を示すので 1234 と記述したものと同じ
;      つまり、1234がダイヤルされると1234を25秒間呼出す
;
;
; パターンマッチングの意味
; _1[1-3] は    11,12,13
;         または _1[123]   と同じ
; _1X     は    10 〜 19   と同じ
; _1Z     は    11 〜 19   と同じ
; _1N     は    12 〜 19   と同じ
; _1.     は    1XXX...XXX (X:0〜9,任意の桁数) と同じ
;                
;
[globals]
;
; グローバル変数 (コンテキスト間で有効) の定義 (なくてもいい。必要箇所で直接記述してもいい)
MYNUMBER=0A12345678               ; ひかり電話番号を記述
BRASTELNUMBER1=050B1234567        ; 家電話のブラステルの番号を記述 
BRASTELNUMBER2=050C1234567        ; 電話転送時のゲートウェイとして使用
FUSIONNUMBER=050D1234567          ; FAXに使うFusionの番号を記述
;
;
[ijklmnop]                        ; コンテキスト名。sip.congfの各コンテキストの"context=ijklmnop"に定義の名前
;
;                                 ; [default] に代えてコンテキスト名は少し複雑な名前を用いる。
;                                 ; [default] は既知のため、攻撃者が類推しにくい名前にするため
;
;
;#*#*# Brastel1〜2 が外線着信したら呼出し音を 50秒間流し、無応答ならば留守録にする。
exten => _29[1-2]0,1,Goto(2990,1) ; パターンマッチングで 2910 と 2920 のいずれかがダイヤルされたときの記述
;                                 ; 本例では、ブラステル1 または、ブラステル2 がダイヤルされたときにここに飛んでくる
;                                 ; (sip.conf の register を参照)
;                                 ; 例では 2910 または、2920 はエクステンション番号 2990 の 1番目に飛ぶ
;
exten => 2990,1,Ringing()         ; リングバックトーン (呼出し音) を発信者に流す
exten => 2990,n,Wait(50)          ; 50秒間待つ (電話を取るのを待つ。この間は呼出し音は鳴り続ける)
exten => 2990,n,Goto(200,rec-voice) ; 50秒経ったら留守録に移る (エクステンション番号 200 の rec-voice ラベルに飛ぶ)
;
;
;#*#*# 2010 と 2020 の呼び出し定義 (内線相互呼び出し)
;
exten => _20[1-2]0,1,Dial(SIP/1234abcd-${EXTEN},30) ; "1234abcd-${EXTEN}" は、sip.conf でのコンテキスト名
exten => _20[1-2]0,n,Hangup()     ; オンフック処理 (通話の終了)
;
;
;#*#*# ボイスメールの再生 (留守電Box: 500番)
;
exten => 20,1,Goto(vm1,1)
exten => vm1,1,Answer()
exten => vm1,n,VoiceMailMain(500,s)               ; sオプションは、再生時パスワード要求なし           
exten => vm1,n,Hangup()                           ; 500番(共通ボックス) のボイスメール再生
;                                                 
;
;#*#*# 内線 99 呼出しは、30秒間全員 (2010 と 2020) を呼び出し
;
exten => 99,1,Dial(SIP/1234abcd-2010&SIP/1234abcd-2020,30)
exten => 99,n,Hangup()
;
;
;#*#*# 音声再生テスト : コールすると話した内容が、追っかけ再生される
;
exten => 100,1,Answer()
exten => 100,n,Wait(1)
exten => 100,n,Playback(demo-echotest) ; "demo-echotest" は Asterisk標準装備の音声ファイル
;「エコーテストモードを開始しました。このモードでは喋った内容がそのままオウム返しされますので実際の
;  音声品質と遅延を耳で確認することができます。受話器を置くかシャープで終了します」
exten => 100,n,Playback(beep)          ; ビープ音
exten => 100,n,Echo                    ; 喋った内容をエコーバック
exten => 100,n,Playback(hello-world)   ;「ありがとうございます」
exten => 100,n,Hangup()
;
;
;#*#*# ひかり電話への着信
;
;   Asteriskプロセスの環境変数　ENV(TRSW)に設定されている内容によって着信時の扱いが決まる。
;   "TRSW" は任意の環境変数名
;
;   転送モード ("1") または、留守録モード ("7") を、環境変数を外部変数扱いして設定
;   Asteriskは、呼を処理するたびに grobal変数は初期設定値に戻るため、
;   呼と呼の間で有効な外部変数扱いとして使用
;
exten => 200,1,NoOp(${ENV(TRSW)})       ; 現在の環境変数の値をCLIに表示 (デバッグのため)
exten => 200,n,GotoIf($[ENV(TRSW) =1]?300,1)   ; ブラステル1 への転送か -> 300
;
;**** 留守録モードのとき
exten => 200,n,Ringing()                ; 留守録時に呼出し音を4秒間鳴らしてから録音に移る
exten => 200,n,Wait(4)
;
exten => 200,n(rec-voice),Answer()      ; 着信に応答 (rec-voice ラベルはどこかから飛んでくるときのラベル)
;                                       ; "exten => 1234,n,Goto(200,rec-voice)" のように使われる 
exten => 200,n,Wait(1)                  ; 無音1秒でコーデック安定を待つ
exten => 200,n,Playback(vm-nobodyavail) ;  「ただいま電話にでることができません」
exten => 200,n,Wait(1)                  ; 1秒待つ
exten => 200,n,Voicemail(500)           ; Voicemailには"vm-intro&beep"が含まれている
exten => 200,n,Hangup()                 ;  「発信音の後にメッセージをお話しください。
;                                       ;    終わりましたら電話を切るかシャープを押してください。ピーッ!」
;**** 転送モードのとき
; ブラステル2 (GW) 経由でブラステル1 に転送
;
exten => 300,1,NoOp(${CALLERID(num)})   ; デバッグ用に呼び出し元番号をCLIに表示
exten => 300,n,NoOp(${CALLERID(name)})  ; デバッグ用に呼び出し元名前をCLIに表示
exten => 300,n,Dial(SIP/${BRASTELNUMBER1}@abcdefgh-brastel2,60,tT)
exten => 300,n,Goto(200,rec-voice)      ; 呼び出し無応答は留守録に移る
;
; tT オプションは rtp (音声ストリーム) をサーバー経由とする設定
; rtp.conf の [general] の中の rtpstart=10000 | rtpend=10009 と設定済み
;
;
;**** ひかり電話着信時の振る舞い設定 (内線で 400 を呼出して設定する)
;
exten => 400,1,Playback(silence/1)                     ; 無音1秒でコーデック安定を待つ
exten => 400,n,Set(TIMEOUT(digit)=5)
exten => 400,n,Set(TIMEOUT(response)=10)
exten => 400,n(retry-exten),Playback(tennsou-rusuden-no-settei) ;「転送は1を、留守電は7を押してください」
;                                                      ; この音声ファイルは作成したもの
exten => 400,n,Playback(beep)                          ; ビープ音「ピーッ!」
exten => 400,n,Set(TRSWVAR="")                         ; TRSWVARは ローカル変数
exten => 400,n,Read(TRSWVAR,,1)                        ; 1桁の番号が入力されたら受け取る
exten => 400,n,GotoIf($[${TRSWVAR}=7]?${EXTEN},reset-exten) ; "7" -> reset-exten
exten => 400,n,GotoIf($[${TRSWVAR}=1]?${EXTEN},set-exten)   ; "1" -> set-exten
exten => 400,n,Playback(bangou-mukou)                  ;「番号が無効です」この音声ファイルは作成したもの
exten => 400,n,Goto(retry-exten)
;
exten => 400,n(reset-exten),NoOp(${TRSWVAR})
exten => 400,n,Set(ENV(TRSW)=7)
exten => 400,n,Playback(rusuden-ni-settei)             ;「留守番電話の録音に設定しました」この音声ファイルは作成したもの
exten => 400,n,Goto(exit-exten)
;
exten => 400,n(set-exten),NoOp(${TRSWVAR})
exten => 400,n,Set(ENV(TRSW)=1)
exten => 400,n,Playback(tennsou-ni-settei)             ;「転送に設定しました」この音声ファイルは作成したもの
;
exten => 400,n(exit-exten),Wait(1)
exten => 400,n,Playback(arigatou)                      ;「ご利用ありがとうございました」この音声ファイルは作成したもの
exten => 400,n,NoOp(${ENV(TRSW)})                      ; デバッグ用に環境変数(TRSW)の結果内容をCLIに表示
exten => 400,n,Hangup()
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;**** FAX受信 : Fusion
;[fax-in]
;
exten => D1234567,1,Ringing() ; "D1234567" はFusion番号の 050D1234567 の 050 を除いた番号
exten => D1234567,n,Answer()
exten => D1234567,n,Wait(5)
exten => D1234567,n,Dial(IAX2/iaxmodem)
;
; "exten => D1234567,n,Hangup()" は、受信完了時に自動的に切れるので不要
; 
;
;**** FAX発信 : Fusion
[fax-out]　; iax.conf で定義したFAXモデムのコンテキスト名
;
; 発信先は、0で始まり、2桁目と3桁目は 1〜9、以降の数字は 0〜9 の任意桁の数字に一致したものが有効
; 00発信や010発信はできない(国際FAXなど)
; 011000000... 〜 099999999... が発信先として有効
;
exten => _0ZZX.,1,Set(CALLERID(num)=${FUSIONNUMBER})
exten => _0ZZX.,n,Set(CALLERID(name)=${FUSIONNUMBER})
exten => _0ZZX.,n,Dial(SIP/${EXTEN}@qrstuvwx-fusion)
; "exten => _0ZZX.,n,Hangup()" は送信終了時に自動的に切れるので不要
;
;
[default] ; デフォルトのコンテキストは中身を空行にしておく (何も定義しない)
;
;::: end of extensions ::::
